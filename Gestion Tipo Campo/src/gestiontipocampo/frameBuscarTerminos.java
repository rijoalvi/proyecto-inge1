/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * frameBuscarTerminos.java
 *
 * Created on 01/04/2009, 12:11:45 AM
 */
package gestiontipocampo;

import java.sql.*;
import javax.swing.JOptionPane;
import javax.swing.tree.*;
import javax.swing.JTree;

/**
 *
 * @author Ricardo
 */
public class frameBuscarTerminos extends javax.swing.JFrame {

    /** Creates new form frameBuscarTerminos */
    public frameBuscarTerminos() {
        initComponents();
        paneTree.setVisible(false);
        paneLista.setVisible(true);
        buscador = new ControladorBD();
    }

    public frameBuscarTerminos(int i) {
        initComponents();
        if (i == 1) { //alfabeticamente
            paneTree.setVisible(false);
            paneLista.setVisible(true);
        }
        buscador = new ControladorBD();
    }

    //Constructor de vista por niveles
    public frameBuscarTerminos(String nombreJerarquia) {
        initComponents();
        paneTree.setVisible(true);
        paneLista.setVisible(false);
        buscador = new ControladorBD();
        llenarTreeViewJerarquia(nombreJerarquia);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLayeredPane1 = new javax.swing.JLayeredPane();
        paneTree = new javax.swing.JLayeredPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        arbolJerarquia = new javax.swing.JTree();
        paneLista = new javax.swing.JLayeredPane();
        scrollPaneJerarquia = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        ButtonPane = new javax.swing.JPanel();
        botonBuscar = new javax.swing.JButton();
        BotonAgregarTermino = new javax.swing.JButton();
        fieldBusqueda = new javax.swing.JTextField();
        labelBusqueda = new javax.swing.JLabel();
        botonCerrar = new javax.swing.JButton();
        botonListarSubarbol = new javax.swing.JButton();
        botonListarHijos = new javax.swing.JButton();
        botonExcluir = new javax.swing.JButton();
        botonModificar = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setName("Form"); // NOI18N

        jLayeredPane1.setName("jLayeredPane1"); // NOI18N

        paneTree.setName("paneTree"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Raíz");
        arbolJerarquia.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        arbolJerarquia.setName("arbolJerarquia"); // NOI18N
        jScrollPane1.setViewportView(arbolJerarquia);

        jScrollPane1.setBounds(0, 0, 160, 400);
        paneTree.add(jScrollPane1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        paneTree.setBounds(0, 0, 310, 400);
        jLayeredPane1.add(paneTree, javax.swing.JLayeredPane.DEFAULT_LAYER);

        paneLista.setName("paneLista"); // NOI18N

        scrollPaneJerarquia.setName("scrollPaneJerarquia"); // NOI18N

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Nombre", "Fecha Inserción", "Descripción"
            }
        ));
        jTable1.setName("jTable1"); // NOI18N
        scrollPaneJerarquia.setViewportView(jTable1);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(gestiontipocampo.GestionTipoCampoApp.class).getContext().getResourceMap(frameBuscarTerminos.class);
        jTable1.getColumnModel().getColumn(0).setHeaderValue(resourceMap.getString("jTable1.columnModel.title0")); // NOI18N
        jTable1.getColumnModel().getColumn(1).setHeaderValue(resourceMap.getString("jTable1.columnModel.title1")); // NOI18N
        jTable1.getColumnModel().getColumn(2).setHeaderValue(resourceMap.getString("jTable1.columnModel.title2")); // NOI18N

        scrollPaneJerarquia.setBounds(10, 10, 290, 380);
        paneLista.add(scrollPaneJerarquia, javax.swing.JLayeredPane.DEFAULT_LAYER);

        paneLista.setBounds(0, 0, 310, 400);
        jLayeredPane1.add(paneLista, javax.swing.JLayeredPane.DEFAULT_LAYER);

        ButtonPane.setName("ButtonPane"); // NOI18N

        botonBuscar.setText(resourceMap.getString("botonBuscar.text")); // NOI18N
        botonBuscar.setName("botonBuscar"); // NOI18N
        botonBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonBuscarActionPerformed(evt);
            }
        });

        BotonAgregarTermino.setText(resourceMap.getString("BotonAgregarTermino.text")); // NOI18N
        BotonAgregarTermino.setName("BotonAgregarTermino"); // NOI18N
        BotonAgregarTermino.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonAgregarTerminoActionPerformed(evt);
            }
        });

        fieldBusqueda.setText(resourceMap.getString("fieldBusqueda.text")); // NOI18N
        fieldBusqueda.setName("fieldBusqueda"); // NOI18N

        labelBusqueda.setLabelFor(fieldBusqueda);
        labelBusqueda.setText(resourceMap.getString("labelBusqueda.text")); // NOI18N
        labelBusqueda.setName("labelBusqueda"); // NOI18N

        botonCerrar.setText(resourceMap.getString("botonCerrar.text")); // NOI18N
        botonCerrar.setName("botonCerrar"); // NOI18N
        botonCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonCerrarActionPerformed(evt);
            }
        });

        botonListarSubarbol.setText(resourceMap.getString("botonListarSubarbol.text")); // NOI18N
        botonListarSubarbol.setName("botonListarSubarbol"); // NOI18N
        botonListarSubarbol.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonListarSubarbolActionPerformed(evt);
            }
        });

        botonListarHijos.setText(resourceMap.getString("botonListarHijos.text")); // NOI18N
        botonListarHijos.setName("botonListarHijos"); // NOI18N
        botonListarHijos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonListarHijosActionPerformed(evt);
            }
        });

        botonExcluir.setText(resourceMap.getString("botonExcluir.text")); // NOI18N
        botonExcluir.setName("botonExcluir"); // NOI18N
        botonExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonExcluirActionPerformed(evt);
            }
        });

        botonModificar.setText(resourceMap.getString("botonModificar.text")); // NOI18N
        botonModificar.setName("botonModificar"); // NOI18N
        botonModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonModificarActionPerformed(evt);
            }
        });

        jButton2.setText(resourceMap.getString("jButton2.text")); // NOI18N
        jButton2.setName("jButton2"); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ButtonPaneLayout = new javax.swing.GroupLayout(ButtonPane);
        ButtonPane.setLayout(ButtonPaneLayout);
        ButtonPaneLayout.setHorizontalGroup(
            ButtonPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ButtonPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ButtonPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(BotonAgregarTermino, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 111, Short.MAX_VALUE)
                    .addComponent(botonModificar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 111, Short.MAX_VALUE)
                    .addComponent(botonExcluir, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 111, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ButtonPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(botonListarHijos, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(botonListarSubarbol, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(fieldBusqueda, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 111, Short.MAX_VALUE)
                    .addComponent(labelBusqueda, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 111, Short.MAX_VALUE)
                    .addComponent(botonBuscar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 111, Short.MAX_VALUE)
                    .addComponent(botonCerrar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 111, Short.MAX_VALUE))
                .addContainerGap())
        );
        ButtonPaneLayout.setVerticalGroup(
            ButtonPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ButtonPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(BotonAgregarTermino)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(botonModificar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(botonExcluir)
                .addGap(18, 18, 18)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(botonListarHijos)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(botonListarSubarbol)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 54, Short.MAX_VALUE)
                .addComponent(labelBusqueda)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fieldBusqueda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(botonBuscar)
                .addGap(52, 52, 52)
                .addComponent(botonCerrar)
                .addContainerGap())
        );

        ButtonPane.setBounds(320, 0, 131, 400);
        jLayeredPane1.add(ButtonPane, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLayeredPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 451, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLayeredPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 401, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botonModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonModificarActionPerformed
        frameTermino fram;
        DefaultMutableTreeNode node = (DefaultMutableTreeNode) arbolJerarquia.getLastSelectedPathComponent();
        if (node != null) {
            TreeNode[] jerPath = node.getPath();

            int IDJerarquia = getIDJerarquia(jerPath[0].toString());
            int IDNodoPadre = getIDNodo(jerPath);

            fram = new frameTermino(IDJerarquia, IDNodoPadre, 1);
            fram.llenarDatos();
            fram.llenarComboCategoria();

            fram.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(this, "Ningún elemento seleccionado para modificar!");
        }
}//GEN-LAST:event_botonModificarActionPerformed

    private void botonListarHijosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonListarHijosActionPerformed
        paneTree.setVisible(false);
        paneLista.setVisible(true);
}//GEN-LAST:event_botonListarHijosActionPerformed

    private void botonListarSubarbolActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonListarSubarbolActionPerformed
        paneTree.setVisible(false);
        paneLista.setVisible(true);
}//GEN-LAST:event_botonListarSubarbolActionPerformed

    private void botonCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonCerrarActionPerformed
        this.dispose();
}//GEN-LAST:event_botonCerrarActionPerformed

    private void BotonAgregarTerminoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonAgregarTerminoActionPerformed
        frameTermino fram;
        DefaultMutableTreeNode node = (DefaultMutableTreeNode) arbolJerarquia.getLastSelectedPathComponent();
        String nombreJer = arbolJerarquia.getModel().getRoot().toString();
        if (node != null) {
            TreeNode[] jerPath = node.getPath();
            for (int i = 0; i < jerPath.length; i++) {
                System.out.println(i + " " + jerPath[i].toString());
            }
            int IDJerarquia = getIDJerarquia(jerPath[0].toString());
            int IDNodoPadre = getIDNodo(jerPath);

            fram = new frameTermino(IDJerarquia, IDNodoPadre, 0);
            fram.llenarComboCategoria();
            fram.setVisible(true);
            llenarTreeViewJerarquia(nombreJer); //actualiza los datos
        } else {
            JOptionPane.showMessageDialog(this, "Ningún elemento seleccionado para agregarle termino!");
        }
}//GEN-LAST:event_BotonAgregarTerminoActionPerformed

    private int getIDJerarquia(String nombre) {
        String ID = "";
        try {
            ResultSet resultado = buscador.getResultSet("select correlativo from JERARQUIA where nombreJerarquia = '" + nombre + "';");
            if (resultado.next()) {
                ID = resultado.getObject("correlativo").toString();
            }
        } catch (SQLException e) {
            System.out.println("*SQL Exception: *" + e.toString());
        }
        return Integer.parseInt(ID);
    }

    private int getIDNodo(TreeNode[] path) {
        TreeNode[] jerPath = path;
        String idNodo = "";
        String tempNodo = "";
        try {
            ResultSet resultado = buscador.getResultSet("select IDNodoRaiz from JERARQUIA where nombreJerarquia = '" + jerPath[0].toString() + "';");
            if (resultado.next()) {
                idNodo = resultado.getObject("IDNodoRaiz").toString();
            }
        } catch (SQLException e) {
            System.out.println("*SQL Exception: *" + e.toString());
        }
        for (int i = 1; i < jerPath.length; i++) {
            tempNodo = idNodo;
            try {
                ResultSet resultado = buscador.getResultSet("select ID from NODO where IDNodoPadre = " + tempNodo + " and nombre = '" + jerPath[i].toString() + "';");
                if (resultado.next()) {
                    idNodo = resultado.getObject("ID").toString();
                }
            } catch (SQLException e) {
                System.out.println("*SQL Exception: *" + e.toString());
            }
        }

        return Integer.parseInt(idNodo);
    }

    private void botonBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonBuscarActionPerformed
        frameBusqueda ventanaBusqueda = new frameBusqueda();
        ventanaBusqueda.setVisible(true);        // TODO add your handling code here:
}//GEN-LAST:event_botonBuscarActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_jButton2ActionPerformed

    private void botonExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonExcluirActionPerformed
        DefaultMutableTreeNode node = (DefaultMutableTreeNode) arbolJerarquia.getLastSelectedPathComponent();
        String nombreJer = arbolJerarquia.getModel().getRoot().toString();
        if (node != null) {
            String[] opciones = {"Si", "No"};
            int respuesta = JOptionPane.showOptionDialog(null, "¿Seguro que desea eliminar este termino y todos los subterminos?", "Confirmación", JOptionPane.YES_NO_OPTION, JOptionPane.PLAIN_MESSAGE, null, opciones, "No");

            switch (respuesta) {
                case 0:
                    /*Si borrar*/
                    TreeNode[] jerPath = node.getPath();

                    int IDJerarquia = getIDJerarquia(jerPath[0].toString());
                    int IDNodoPadre = getIDNodo(jerPath);
                    buscador.doUpdate("delete from NODO where ID = " + IDNodoPadre);

                    break;
                case 1:
                    /*No borrar*/
                    break;
            }
            llenarTreeViewJerarquia(nombreJer); //actualiza los datos
        } else {
            JOptionPane.showMessageDialog(this, "Ningún elemento seleccionado para borrar!");
        }
    }//GEN-LAST:event_botonExcluirActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new frameBuscarTerminos().setVisible(true);
            }
        });
    }

    /**
     * Llena los valores del tree view
     * @param nombreJerarquia
     */
    public void llenarTreeViewJerarquia(String nombreJerarquia) {
        //Se llena el arbol
        //Llena los valores del Tree View
        String valores;
        String[] valTrim;
        valores = buscarDatosEnBD(nombreJerarquia);
        valTrim = valores.split(";");
        String IDsHijos;
        String trimIDsHijos[];
        DefaultMutableTreeNode nodoTemp;
        DefaultMutableTreeNode raizArbol = new DefaultMutableTreeNode(nombreJerarquia);
        if (Integer.parseInt(valTrim[2]) > 1) { //Si tiene mas de un nivel la jerarquia
            IDsHijos = buscarIDHijos(Integer.parseInt(valTrim[1]));
            if(IDsHijos.length() > 1){
                trimIDsHijos = IDsHijos.split(";");
                for (int j = 0; j < trimIDsHijos.length ; ++j) { //Mientras tenga hijos la raiz
                    nodoTemp = llenarSubArbol(Integer.parseInt(trimIDsHijos[j]));
                    raizArbol.add(nodoTemp);
                }
            }
        }
        JTree arbolnuevo = new JTree(raizArbol);
        arbolJerarquia.setModel(arbolnuevo.getModel());
    }

    public DefaultMutableTreeNode llenarSubArbol(int ID) {
        String IDsHijos;
        String trimIDsHijos[];
        DefaultMutableTreeNode nodoActual;
        String nombre = buscarNombreNodo(ID);
        DefaultMutableTreeNode nodoTemp;
        nodoActual = new DefaultMutableTreeNode(nombre);
        IDsHijos = buscarIDHijos(ID ); //IDs hijos
        if(IDsHijos.length() > 1){
            trimIDsHijos = IDsHijos.split(";");
            for (int j = 0; j < trimIDsHijos.length ; ++j) { //Mientras tenga hijos el nodo
                nodoTemp = llenarSubArbol(Integer.parseInt(trimIDsHijos[j]));
                nodoActual.add(nodoTemp);
            }
        }
        return nodoActual;
    }

    /**
     * Encargado de buscar los valores TIPOCAMPO segun el nombre en la base de datos
     * @param nombre: Indica el nombre del tipo de campo que va a buscar
     */
    public String buscarDatosEnBD(String nombre) {
        String valores = "";
        try {
            ResultSet resultado = buscador.getResultSet("select correlativo, IDNodoRaiz, NumeroDeNiveles from JERARQUIA where nombreJerarquia = '" + nombre + "';");
            if (resultado.next()) {
                valores += resultado.getObject("correlativo").toString() + ";"; //ID correlativo
                valores += resultado.getObject("IDNodoRaiz").toString() + ";"; //IDRaiz
                valores += resultado.getObject("NumeroDeNiveles").toString() + ";"; //num niveles
            }
        } catch (SQLException e) {
            System.out.println("*SQL Exception: *" + e.toString());
        }
        return valores;
    }

    /**
     *
     * @param IDnodo
     * @return
     */
    public int numDeHijos(int IDnodo) {
        String valores = "";
        try {
            ResultSet resultado = buscador.getResultSet("select count(*) from NODO where IDNodoPadre = '" + IDnodo + "';");
            if (resultado.next()) {
                valores += resultado.getObject(1).toString(); //cant hijos
            }
        } catch (SQLException e) {
            System.out.println("*SQL Exception: *" + e.toString());
        }
        return Integer.parseInt(valores);
    }

    /**
     *
     * @param IDnodo
     * @return
     */
    public String buscarIDHijos(int IDnodo/*, int cantHijos*/) {
        String valores = "";
        try {
            ResultSet resultado = buscador.getResultSet("select ID from NODO where IDNodoPadre = '" + IDnodo + "';");
            while(resultado.next()){
                valores += resultado.getObject("ID").toString() + ";"; //ID nodo hijo
            }           
        } catch (SQLException e) {
            System.out.println("*SQL Exception: *" + e.toString());
        }
        return valores;
    }

    /**
     * 
     * @param num
     * @return
     */
    public String buscarNombreNodo(int ID) {
        String valores = "";
        try {
            ResultSet resultado = buscador.getResultSet("select nombre from NODO where ID = '" + ID + "';");
            if (resultado != null) {
                while (resultado.next()) {
                    valores += resultado.getObject("nombre").toString();
                }
            }
        } catch (SQLException e) {
            System.out.println("*SQL Exception: *" + e.toString());
        }
        return valores;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BotonAgregarTermino;
    private javax.swing.JPanel ButtonPane;
    private javax.swing.JTree arbolJerarquia;
    private javax.swing.JButton botonBuscar;
    private javax.swing.JButton botonCerrar;
    private javax.swing.JButton botonExcluir;
    private javax.swing.JButton botonListarHijos;
    private javax.swing.JButton botonListarSubarbol;
    private javax.swing.JButton botonModificar;
    private javax.swing.JTextField fieldBusqueda;
    private javax.swing.JButton jButton2;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel labelBusqueda;
    private javax.swing.JLayeredPane paneLista;
    private javax.swing.JLayeredPane paneTree;
    private javax.swing.JScrollPane scrollPaneJerarquia;
    // End of variables declaration//GEN-END:variables
    private ControladorBD buscador;
}
